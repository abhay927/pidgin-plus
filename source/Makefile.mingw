# Makefile.mingw
#
# Author: hermanator12002@yahoo.com
# Date 9/11/02
# Description: Top Makefile for win32 (mingw) port of Pidgin and libpurple
#

PIDGIN_TREE_TOP := .
include $(PIDGIN_TREE_TOP)/libpurple/win32/global.mak

# Generate a X.X.X.X version for the installer file versioning header
# The last digit will be 99 for a final release, 0 for dev or unknown, or the beta number
PRODUCT_VERSION = $(shell \
awk 'BEGIN {FS="."} { \
    if (int($$3) == $$3) { \
        $$4 = "99"; \
    } else { \
        $$5 = $$3; \
        sub(int($$3), "", $$5); \
        if ($$5 == "dev") { \
            $$4 = "0"; \
        } else { \
            if (sub("beta", "", $$5) > 0) { \
                $$4 = $$5; \
            } else { \
                $$4 = "0"; \
            } \
        } \
    } \
    printf("%s.%s.%s.%s", $$1, $$2, int($$3), $$4); \
    exit; \
}' VERSION)

GTK_INSTALL_VERSION = $(shell pidgin/win32/nsis/generate_gtk_zip.sh --gtk-version)

signtool_command = $(SIGNTOOL) sign \
				    //f "$(SIGNTOOL_PFX)" //p "$(SIGNTOOL_PASSWORD)" \
				    //t "http://timestamp.verisign.com/scripts/timstamp.dll" \
				    //du "$(APPLICATION_WEBSITE)" //d $(2) $(1)

gpg_sign_command = @$(GPG_SIGN) -ab --batch --yes --passphrase "$(GPG_PASSWORD)" $(1) && $(GPG_SIGN) --verify $(1).asc

# Authenticode signing
define authenticode_sign
	$(if $(findstring bypass, $(SIGNTOOL)),
		@printf "$(if $(findstring line, $(4)),\n)";
		@./colored.sh note "bypassing Authenticode signing for $(1)";
		@printf "$(if $(findstring line, $(5)),\n)",
		@./colored.sh info blue "Signing $(1) with Authenticode";
		@$(call signtool_command,$1,$2);
		@printf "$(if $(findstring line, $(3)),\n)"
	)
endef

# GPG signing
define gpg_sign
	$(if $(findstring bypass, $(GPG_SIGN)),
		@printf "$(if $(findstring line, $(3)),\n)";
		@./colored.sh note "bypassing GPG signing for $(1)";
		@printf "$(if $(findstring line, $(4)),\n)",
		@./colored.sh info blue "Signing $(1) with GnuPG";
		@$(call gpg_sign_command,$1);
		@printf "$(if $(findstring line, $(2)),\n)"
	)
endef

STRIPPED_RELEASE_DIR = $(PIDGIN_TREE_TOP)/pidgin-$(DISPLAY_VERSION)-win32bin
DEBUG_SYMBOLS_DIR = $(PIDGIN_TREE_TOP)/pidgin-$(DISPLAY_VERSION)-dbgsym

PIDGIN_INST_DEP_DIR="$(WIN32_DEV_TOP)/pidgin-inst-deps-20130214"

# Any *.dll or *.exe files included in win32-install-dir that we don't compile
# should be included in this list so they don't get stripped
EXTERNAL_DLLS = \
	comerr32.dll \
	freebl3.dll \
	gssapi32.dll \
	k5sprt32.dll \
	krb5_32.dll \
	libenchant.dll \
	libenchant_ispell.dll \
	libenchant_myspell.dll \
	libgtkspell-0.dll \
	libmeanwhile-1.dll \
	libnspr4.dll \
	libplc4.dll \
	libplds4.dll \
	libsasl.dll \
	libssp-0.dll \
	libwinpthread-1.dll \
	libxml2-2.dll \
	nss3.dll \
	nssutil3.dll \
	saslANONYMOUS.dll \
	saslCRAMMD5.dll \
	saslDIGESTMD5.dll \
	saslGSSAPI.dll \
	saslLOGIN.dll \
	saslPLAIN.dll \
	libsilc-1-1-2.dll \
	libsilcclient-1-1-3.dll \
	smime3.dll \
	softokn3.dll \
	sqlite3.dll \
	ssl3.dll

ifndef DISABLE_CRASH_REPORT
	EXTERNAL_DLLS += 	exchndl.dll
endif

ifndef DISABLE_UPDATE_CHECK
	EXTERNAL_DLLS += winsparkle.dll
endif

ifeq ($(BITNESS), 64)
	EXTERNAL_DLLS += libgcc_s_seh-1.dll
else
	EXTERNAL_DLLS += libgcc_s_dw2-1.dll
endif

#build an expression for `find` to use to ignore the above files
EXTERNAL_DLLS_FIND_EXP = $(patsubst %,-o -name %,$(EXTERNAL_DLLS))

include $(PIDGIN_COMMON_RULES)

.PHONY: all docs install installer installer_offline installer_zip debug_symbols_zip installers clean uninstall create_release_install_dir generate_installer_includes $(PIDGIN_REVISION_H) $(PIDGIN_REVISION_RAW_TXT) gtk_runtime_zip gtk_runtime_zip_force dictionaries_bundle dictionaries_bundle_force source_code_zip

all: $(PIDGIN_CONFIG_H) $(PIDGIN_REVISION_H)
	$(MAKE) -C $(PURPLE_TOP) -f $(MINGW_MAKEFILE)
	$(MAKE) -C $(PIDGIN_TOP) -f $(MINGW_MAKEFILE)
ifndef DISABLE_NLS
	$(MAKE) -C $(PURPLE_PO_TOP) -f $(MINGW_MAKEFILE)
endif

install: all $(PIDGIN_INSTALL_DIR)
	@./colored.sh info "Installing to $(PIDGIN_INSTALL_DIR)"
	$(MAKE) -C $(PURPLE_TOP) -f $(MINGW_MAKEFILE) install
	$(MAKE) -C $(PIDGIN_TOP) -f $(MINGW_MAKEFILE) install
ifndef DISABLE_NLS
	$(MAKE) -C $(PURPLE_PO_TOP) -f $(MINGW_MAKEFILE) install
endif
	$(MAKE) -C share/ca-certs -f $(MINGW_MAKEFILE) install
	$(MAKE) -C share/sounds -f $(MINGW_MAKEFILE) install
	mkdir -p $(PIDGIN_INSTALL_DIR)/spellcheck/lib/enchant
	cp $(GTKSPELL_TOP)/bin/libgtkspell-0.dll $(PIDGIN_INSTALL_DIR)/spellcheck
	cp $(ENCHANT_TOP)/bin/libenchant.dll $(PIDGIN_INSTALL_DIR)/spellcheck
	cp -R $(ENCHANT_TOP)/lib/enchant/*.dll $(PIDGIN_INSTALL_DIR)/spellcheck/lib/enchant
ifndef DISABLE_CRASH_REPORT
	cp $(PIDGIN_INST_DEP_DIR)/exchndl.dll $(PIDGIN_INSTALL_DIR)
endif
ifndef DISABLE_UPDATE_CHECK
ifeq ($(BITNESS), 64)
	cp $(WINSPARKLE_TOP)/x64/Release/WinSparkle.dll $(PIDGIN_INSTALL_DIR)/winsparkle.dll
else
	cp $(WINSPARKLE_TOP)/Release/WinSparkle.dll $(PIDGIN_INSTALL_DIR)/winsparkle.dll
endif
endif
	@./colored.sh info "Selecting the appropriate LibSSP"
	./getwinssp.sh $(GCC_TOP) $(PIDGIN_INSTALL_DIR) $(BITNESS)
ifeq ($(BITNESS), 64)
	if test -f $(GCC_TOP)/libgcc_s_seh-1.dll; then cp $(GCC_TOP)/libgcc_s_seh-1.dll $(PIDGIN_INSTALL_DIR); fi
else
	if test -f $(GCC_TOP)/libgcc_s_dw2-1.dll; then cp $(GCC_TOP)/libgcc_s_dw2-1.dll $(PIDGIN_INSTALL_DIR); fi
endif
	if test -f $(GCC_TOP)/libwinpthread-1.dll; then cp $(GCC_TOP)/libwinpthread-1.dll $(PIDGIN_INSTALL_DIR); fi

gtk_runtime_zip:
	@./colored.sh info "Obtaining the GTK+ runtime"
	pidgin/win32/nsis/generate_gtk_zip.sh "`pwd`" $(BITNESS)

gtk_runtime_zip_force:
	@./colored.sh pace "Building the GTK+ runtime"
	pidgin/win32/nsis/generate_gtk_zip.sh "`pwd`" $(BITNESS) --force
	$(call gpg_sign,pidgin/win32/nsis/gtk-runtime-$(GTK_INSTALL_VERSION).zip,none,line)
	$(if $(shell if test -f pidgin/win32/nsis/gtk-runtime-$(GTK_INSTALL_VERSION)-source.zip; then echo exists; fi),$(call gpg_sign,pidgin/win32/nsis/gtk-runtime-$(GTK_INSTALL_VERSION)-source.zip,none,none,line))
	@echo

dictionaries_bundle:
	@./colored.sh info "Obtaining the dictionaries bundle"
	pidgin/win32/nsis/generate_dictionaries_zip.sh "`pwd`" "$(UPSTREAM_VERSION)"

dictionaries_bundle_force:
	@./colored.sh pace "Building the dictionaries bundle"
	pidgin/win32/nsis/generate_dictionaries_zip.sh "`pwd`" "$(UPSTREAM_VERSION)" --create
	$(call gpg_sign,pidgin/win32/nsis/dictionaries.zip,line)

generate_installer_includes: create_release_install_dir gtk_runtime_zip debug_symbols_zip $(PIDGIN_TREE_TOP)/pidgin/win32/nsis/nsis_translations.desktop
	@./colored.sh info "Generating installer includes"
	rm -f pidgin/win32/nsis/pidgin-translations.nsh pidgin/win32/nsis/pidgin-spellcheck.nsh pidgin/win32/nsis/pidgin-spellcheck-preselect.nsh
	find $(STRIPPED_RELEASE_DIR)/locale -maxdepth 1 -mindepth 1 \
		-printf '%f\n' | LC_ALL=C sort | while IFS= read -r lang_code; do \
			lang_name=$$(grep '^"Language:' po/$$lang_code.po); \
			lang_name="$${lang_name#*: }"; \
			lang_name="$${lang_name%\\n\"}"; \
			echo "\"$$lang_code\" \"$$lang_name\""; \
		done | sed -e s/^/\!insertmacro\ LANG_SECTION\ / \
	 > pidgin/win32/nsis/pidgin-translations.nsh
	#GTK+ extraction, except for locale files which are extracted separately
	unzip -l pidgin/win32/nsis/gtk-runtime-$(GTK_INSTALL_VERSION).zip | awk -F' ' '{ print $$4 }' | grep -v /locale/ | grep -v /$$ | grep ^Gtk | while read -r file; do \
	    echo '!insertmacro ExtractFromGtk "$$'\(PIDGINEXTRACT\)'" '"$$file"; \
	done > pidgin/win32/nsis/gtk-extraction.nsh
	#Convert the available.lst lines to "!insertmacro SPELLCHECK_SECTION lang lang_name lang_file"
	sed -e "/^#/d" -e "s/^[^,]\{1,\},[^,]\{1,\},/\"/" \
	 -e "s/,/\"\ \"/" -e "s/,/\"\ \"/" -e "s/[\ \t]*$$/\"/" \
	 -e "s/^/\!insertmacro\ SPELLCHECK_SECTION\ /" \
         pidgin/win32/nsis/available.lst \
         > pidgin/win32/nsis/pidgin-spellcheck.nsh
	#Convert the lines to "!insertmacro CHECK_SPELLCHECK_SECTION lang"
	iconv -f latin1 -t utf-8 pidgin/win32/nsis/pidgin-spellcheck.nsh | \
	 sed -e "s/SPELLCHECK_SECTION/CHECK_SPELLCHECK_SECTION/" \
	 -e "s/ \"[^\"]*\"\ \"[^\"]*\"[\t\ ]*$$//" | \
         iconv -f utf-8 -t latin1 \
        > pidgin/win32/nsis/pidgin-spellcheck-preselect.nsh
	#Generate the Installer translations
	echo "!define GCOMPRIS_NSIS_INCLUDE_PATH \".\"" > $(PIDGIN_TREE_TOP)/pidgin/win32/nsis/langmacros.nsh
	echo "@INSERT_TRANSLATIONS@" >> $(PIDGIN_TREE_TOP)/pidgin/win32/nsis/langmacros.nsh
	$(PERL) $(PIDGIN_TREE_TOP)/pidgin/win32/nsis/create_nsis_translations.pl \
		$(PIDGIN_TREE_TOP)/pidgin/win32/nsis/nsis_translations.desktop \
		$(PIDGIN_TREE_TOP)/pidgin/win32/nsis/langmacros.nsh \
		$(PIDGIN_TREE_TOP)/pidgin/win32/nsis/translations

create_release_install_dir: install
	@./colored.sh info "Creating the installation directory"
	rm -rf $(STRIPPED_RELEASE_DIR)
	mkdir $(STRIPPED_RELEASE_DIR)
	tar -cf - $(PIDGIN_INSTALL_DIR) --exclude=Gtk --exclude=spellcheck/share \
	 | tar --strip 2 -xC $(STRIPPED_RELEASE_DIR) -f -
	find $(STRIPPED_RELEASE_DIR) \( -name '*.dll' -o -name '*.exe' \) \
	 -not \( -false $(EXTERNAL_DLLS_FIND_EXP) \) \
	 -exec $(STRIP) --strip-unneeded {} ';'
	$(call authenticode_sign,$(STRIPPED_RELEASE_DIR)/pidgin.exe,"Pidgin++ $(DISPLAY_VERSION)")

installer: generate_installer_includes
	@./colored.sh info "Building the installer"
	$(eval $@_DEBUG_SYMBOLS_SHA1SUM := $(shell sha1sum $(DEBUG_SYMBOLS_DIR).zip | sed -e "s/\ .*$$//"))
	$(eval $@_GTK_SHA1SUM := $(shell sha1sum pidgin/win32/nsis/gtk-runtime-$(GTK_INSTALL_VERSION).zip | sed -e "s/\ .*$$//"))
	$(MAKENSIS) -V3 -DAPPLICATION_VERSION="$(APPLICATION_VERSION)" -DDISPLAY_VERSION="$(DISPLAY_VERSION)" \
		-DUPSTREAM_VERSION="$(UPSTREAM_VERSION)" -DPRODUCT_VERSION="$(PRODUCT_VERSION)" \
		-DPIDGIN_INSTALL_DIR="$(STRIPPED_RELEASE_DIR)" -DGTK_INSTALL_VERSION="$(GTK_INSTALL_VERSION)" \
		-DAPPLICATION_NAME="$(APPLICATION_NAME)" -DAPPLICATION_WEBSITE="$(APPLICATION_WEBSITE)" \
		-DDEBUG_SYMBOLS_SHA1SUM="$($@_DEBUG_SYMBOLS_SHA1SUM)" -DGTK_SHA1SUM="$($@_GTK_SHA1SUM)"\
		-DAPPLICATION_BITNESS="$(BITNESS)" -DAPPLICATION_ARCHITECTURE="$(if $(findstring 64, $(BITNESS)), x64, x86)" \
		$(if $(findstring 64, $(BITNESS)), -DX64_APPLICATION) \
		pidgin/win32/nsis/pidgin-installer.nsi
	mv pidgin/win32/nsis/pidgin++_$(DISPLAY_VERSION).exe ./
	$(call authenticode_sign,pidgin++_$(DISPLAY_VERSION).exe,"Pidgin++ Installer")
	$(call gpg_sign,pidgin++_$(DISPLAY_VERSION).exe)

installer_offline: generate_installer_includes dictionaries_bundle
	@./colored.sh info "Building the offline installer"
	$(eval $@_DEBUG_SYMBOLS_DIR := $(shell echo $(DEBUG_SYMBOLS_DIR) | tr / \\\\))
	$(MAKENSIS) -V3 -DAPPLICATION_VERSION="$(APPLICATION_VERSION)" -DDISPLAY_VERSION="$(DISPLAY_VERSION)" \
		-DUPSTREAM_VERSION="$(UPSTREAM_VERSION)" -DPRODUCT_VERSION="$(PRODUCT_VERSION)" \
		-DPIDGIN_INSTALL_DIR="$(STRIPPED_RELEASE_DIR)" -DGTK_INSTALL_VERSION="$(GTK_INSTALL_VERSION)" \
		-DAPPLICATION_NAME="$(APPLICATION_NAME)" -DAPPLICATION_WEBSITE="$(APPLICATION_WEBSITE)" \
		-DDEBUG_SYMBOLS_DIR="$($@_DEBUG_SYMBOLS_DIR)" -DOFFLINE_INSTALLER \
		-DAPPLICATION_BITNESS="$(BITNESS)" -DAPPLICATION_ARCHITECTURE="$(if $(findstring 64, $(BITNESS)), x64, x86)" \
		$(if $(findstring 64, $(BITNESS)), -DX64_APPLICATION) \
		pidgin/win32/nsis/pidgin-installer.nsi
	mv pidgin/win32/nsis/pidgin++_$(DISPLAY_VERSION)_offline.exe ./
	$(call authenticode_sign,pidgin++_$(DISPLAY_VERSION)_offline.exe,"Pidgin++ Installer")
	$(call gpg_sign,pidgin++_$(DISPLAY_VERSION)_offline.exe)

installer_zip: create_release_install_dir
	@./colored.sh info "Building the zip package"
	rm -f pidgin-$(DISPLAY_VERSION)-win32-bin.zip
	zip -9 -r pidgin-$(DISPLAY_VERSION)-win32-bin.zip $(STRIPPED_RELEASE_DIR)
	$(call gpg_sign,pidgin-$(DISPLAY_VERSION)-win32-bin.zip,line,none,line)

debug_symbols_zip: install
	@./colored.sh info "Building debug symbols"
	rm -rf $(DEBUG_SYMBOLS_DIR) $(DEBUG_SYMBOLS_DIR).zip
	mkdir $(DEBUG_SYMBOLS_DIR)
	tar -cf - `find $(PIDGIN_INSTALL_DIR) \( -name '*.dll' -o -name '*.exe' \) \
	 -not \( -false $(EXTERNAL_DLLS_FIND_EXP) \) -print` \
	 | tar --strip 2 --xform s/$$/.dbgsym/ -xC $(DEBUG_SYMBOLS_DIR) -f -
	cp $(MEANWHILE_TOP)/bin/libmeanwhile-1.dll.unstripped $(DEBUG_SYMBOLS_DIR)/libmeanwhile-1.dll.dbgsym
	zip -9 -r $(DEBUG_SYMBOLS_DIR).zip $(DEBUG_SYMBOLS_DIR)
	$(call gpg_sign,$(DEBUG_SYMBOLS_DIR).zip)

installers: installer installer_offline debug_symbols_zip installer_zip

source_code_zip:
	@./colored.sh pace "Building the source code bundle"
	bzr export --uncommitted --directory $(BAZAAR_BRANCH) --root pidgin++_$(DISPLAY_VERSION) pidgin++_$(DISPLAY_VERSION)_source.zip
	$(call gpg_sign, pidgin++_$(DISPLAY_VERSION)_source.zip,line)

Doxyfile.mingw: Doxyfile.in
	sed -e "s/@PACKAGE@/pidgin/" -e "s/@VERSION@/$(APPLICATION_VERSION)/" -e "s/@top_srcdir@/$(PIDGIN_TREE_TOP)/g" -e "s/@enable_dot@/NO/" $< > $@

docs: Doxyfile.mingw
	@./colored.sh info "Executing doxygen"
	@doxygen Doxyfile.mingw
	@echo

clean:
	$(MAKE) -C $(PURPLE_PO_TOP) -f $(MINGW_MAKEFILE) clean
	$(MAKE) -C $(PIDGIN_TOP) -f $(MINGW_MAKEFILE) clean
	$(MAKE) -C $(PURPLE_TOP) -f $(MINGW_MAKEFILE) clean
	$(MAKE) -C share/ca-certs -f $(MINGW_MAKEFILE) clean
	rm -f $(PIDGIN_CONFIG_H) $(PIDGIN_REVISION_H) $(PIDGIN_REVISION_RAW_TXT) ./VERSION pidgin++_$(DISPLAY_VERSION)*.exe pidgin-$(DISPLAY_VERSION)-win32-bin.zip $(DEBUG_SYMBOLS_DIR).zip
	rm -rf doc/html Doxyfile.mingw

uninstall:
	rm -rf $(PURPLE_INSTALL_PERL_DIR) $(PIDGIN_INSTALL_PLUGINS_DIR) $(PURPLE_INSTALL_PO_DIR) $(PIDGIN_INSTALL_DIR) $(STRIPPED_RELEASE_DIR) $(DEBUG_SYMBOLS_DIR)
	rm -f ./VERSION

include $(PIDGIN_COMMON_TARGETS)

